//
// This file is part of Gambit
// Copyright (c) 1994-2023, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/tools/enumpoly/gtree.imp
// Implementation of a generic tree container class
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "gtree.h"

//--------------------------------------------------------------------------
//                 gTreeNode<T>: Member function implementations
//--------------------------------------------------------------------------

template <class T>
gTreeNode<T>::gTreeNode(const T& _data, 
			gTreeNode<T>* _parent, 
			gTreeNode<T>* _prev, 
			gTreeNode<T>* _next, 
			gTreeNode<T>* _eldest, 
			gTreeNode<T>* _youngest)
  : data(_data), 
    parent(_parent), 
    prev(_prev), 
    next(_next), 
    eldest(_eldest), 
    youngest(_youngest)
{ }

template <class T> gTreeNode<T>::~gTreeNode()
= default;



//--------------------------------------------------------------------------
//                 gTree<T>: Member function implementations
//--------------------------------------------------------------------------

template <class T> gTree<T>::gTree() 
: root(nullptr)
{ }

template <class T> gTree<T>::gTree(const T& rootdatum) 
: root(nullptr)
{ 
  root = new gTreeNode<T>(rootdatum,nullptr,nullptr,nullptr,nullptr,nullptr);
}

template <class T> gTree<T>::gTree(const gTree<T>& b)
: root(nullptr)
{
  if (b.root != nullptr)
    {
      root = new gTreeNode<T>(b.root->data, nullptr, nullptr, nullptr, nullptr, nullptr);
      RecursiveCopy(root, b.root);
    }
}

template <class T> gTree<T>::~gTree()
{
  Flush();
}

template <class T> void gTree<T>::InsertAt(const T& t, gTreeNode<T>* n)
{
  //  assert (n != NULL);

  if (n->eldest == nullptr) {
    auto* newn = new gTreeNode<T>(t,n,nullptr,nullptr,nullptr,nullptr);
    n->SetEldest(newn);
    n->SetYoungest(newn);
  }
  else {
    auto* newn = new gTreeNode<T>(t,n,n->youngest,nullptr,nullptr,nullptr);
    n->youngest->SetNext(newn);
    n->SetYoungest(newn);
  }
}

template <class T> void gTree<T>::RecursiveCopy(      gTreeNode<T>* copyn,
						const gTreeNode<T>* orign)
{
  Gambit::List<gTreeNode<T>*> oldchildren = Children(orign);
  int i;
  for (i = 1; i <= oldchildren.Length(); i++)
    InsertAt(oldchildren[i]->data,copyn);
  Gambit::List<gTreeNode<T>*> newchildren = Children(copyn);
  for (i = 1; i <= newchildren.Length(); i++)
    RecursiveCopy(newchildren[i],oldchildren[i]);
}

//--------------------- operators ------------------------

template <class T> gTree<T>& gTree<T>::operator=(const gTree<T>& b)
{
  if (this != &b)   {
    Flush();
    if (root != nullptr)   {
      root = new gTreeNode<T>(b.root->data, nullptr, nullptr, nullptr, nullptr, nullptr);
      RecursiveCopy(root, b.root);
    }
    else
      root = nullptr;
  }
  return *this;
}

template <class T> bool gTree<T>::operator==(const gTree<T>& b) const
{
  if (root == nullptr && b.root == nullptr) return true;
  if (root == nullptr || b.root == nullptr) return false;
  return SubtreesAreIsomorphic(root,b.root);
}

template <class T> bool gTree<T>::operator!=(const gTree<T>& b) const
{
  return !(*this == b);
}

template <class T> 
Gambit::List<gTreeNode<T>*> gTree<T>::Children(const gTreeNode<T>* n) const
{
  //assert(n != NULL);
  Gambit::List<gTreeNode<T>*> answer;
  for (gTreeNode<T>* child = n->eldest; child != nullptr; child = child->next)
    answer.push_back(child);
  return answer;
}

template <class T> gTreeNode<T>* gTree<T>::RootNode() const
{
  return root;
}

template <class T> 
gTreeNode<T>* gTree<T>::RecursiveFind(const T& t, gTreeNode<T>* n) const
{
  gTreeNode<T>* answer = nullptr;
  if (n->data == t) answer = n;
  else {
    gTreeNode<T>* probe = n->eldest;
    while (answer == nullptr && probe != nullptr) {
      answer = RecursiveFind(t,probe);
      probe = probe->next;
    }
  }
  return answer;
}

template <class T> gTreeNode<T>* gTree<T>::Find(const T& t) const
{
  return RecursiveFind(t,root);
}

template <class T> bool gTree<T>::Contains(const T& t) const
{
  return (Find(t) != nullptr);
}

template <class T> 
bool gTree<T>::SubtreesAreIsomorphic(const gTreeNode<T>* lhs, 
				     const gTreeNode<T>* rhs) const
{
  if (lhs->data != rhs->data) return false;
  Gambit::List<gTreeNode<T>*> lchildren = Children(lhs);
  Gambit::List<gTreeNode<T>*> rchildren = Children(rhs);
  if (lchildren.Length() != rchildren.Length()) return false;
  for (int i = 1; i <= lchildren.Length(); i++)
    if ( !SubtreesAreIsomorphic(lchildren[i],rchildren[i]) ) return false;
  return true;
}

template <class T> void gTree<T>::RecursiveFlush(const gTreeNode<T>* n)
{
  Gambit::List<gTreeNode<T>*> children = Children(n);
  for (int i = 1; i <= children.Length(); i++)
    RecursiveFlush(children[i]);
  delete n;
}

template <class T> void gTree<T>::Flush()
{
  RecursiveFlush(root);
  root = nullptr;
}



