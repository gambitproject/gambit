//
// This file is part of Gambit
// Copyright (c) 1994-2023, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/libgambit/behav.imp
// Behavior strategy profile classes.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include <algorithm>

#include "behav.h"
#include "gametree.h"

namespace Gambit {

//========================================================================
//                  MixedBehaviorProfile<T>: Lifecycle
//========================================================================

template <class T>
MixedBehaviorProfile<T>::MixedBehaviorProfile(const MixedBehaviorProfile<T> &p_profile)
  : DVector<T>(p_profile),
    m_support(p_profile.m_support),
    m_cacheValid(false),
    m_realizProbs(p_profile.m_realizProbs), m_beliefs(p_profile.m_beliefs),
    m_nvals(p_profile.m_nvals), m_bvals(p_profile.m_bvals),
    m_nodeValues(p_profile.m_nodeValues),
    m_infosetValues(p_profile.m_infosetValues),
    m_actionValues(p_profile.m_actionValues),
    m_regret(p_profile.m_regret)
{
  m_realizProbs = (T) 0.0;
  m_beliefs = (T) 0.0;
  m_nodeValues = (T) 0.0;
  m_infosetValues = (T) 0.0;
  m_actionValues = (T) 0.0;
  m_regret = (T) 0.0;
}

template <class T> 
MixedBehaviorProfile<T>::MixedBehaviorProfile(const Game &p_game)
  : DVector<T>(p_game->NumActions()),
    m_support(BehaviorSupportProfile(p_game)),
    m_cacheValid(false),
    m_realizProbs(p_game->NumNodes()),
    m_beliefs(p_game->NumNodes()),
    m_nvals(p_game->NumNodes()),
    m_bvals(p_game->NumNodes()),
    m_nodeValues(p_game->NumNodes(),
		 p_game->NumPlayers()),
    m_infosetValues(p_game->NumInfosets()),
    m_actionValues(p_game->NumActions()),
    m_regret(p_game->NumActions())
{
  m_realizProbs = (T) 0.0;
  m_beliefs = (T) 0.0;
  m_nodeValues = (T) 0.0;
  m_infosetValues = (T) 0.0;
  m_actionValues = (T) 0.0;
  m_regret = (T) 0.0;
  SetCentroid();
}

template <class T> 
MixedBehaviorProfile<T>::MixedBehaviorProfile(const BehaviorSupportProfile &p_support) 
  : DVector<T>(p_support.NumActions()),
    m_support(p_support),
    m_cacheValid(false),
    m_realizProbs(p_support.GetGame()->NumNodes()),
    m_beliefs(p_support.GetGame()->NumNodes()),
    m_nvals(p_support.GetGame()->NumNodes()),
    m_bvals(p_support.GetGame()->NumNodes()),
    m_nodeValues(p_support.GetGame()->NumNodes(),
		 p_support.GetGame()->NumPlayers()),
    m_infosetValues(p_support.GetGame()->NumInfosets()),
    m_actionValues(p_support.GetGame()->NumActions()),
    m_regret(p_support.GetGame()->NumActions())
{
  m_realizProbs = (T) 0.0;
  m_beliefs = (T) 0.0;
  m_nodeValues = (T) 0.0;
  m_infosetValues = (T) 0.0;
  m_actionValues = (T) 0.0;
  m_regret = (T) 0.0;
  SetCentroid();
}

template <class T>
void MixedBehaviorProfile<T>::BehaviorStrat(int pl, GameTreeNodeRep *p_node)
{
  for (int i = 1; i <= p_node->children.Length(); i++)   {
    GameTreeNodeRep *child = p_node->children[i];
    if (p_node->GetPlayer() && p_node->GetPlayer()->GetNumber() == pl) {
      if (m_nvals[p_node->number] > (T) 0 && 
	  m_nvals[child->number] > (T) 0)  {
	(*this)(p_node->GetPlayer()->GetNumber(),
		p_node->GetInfoset()->GetNumber(), 
		m_support.GetIndex(p_node->GetInfoset()->GetAction(i))) =
	  m_nvals[child->number] / m_nvals[p_node->number];
      }
    }
    BehaviorStrat(pl, child);
  }
}

template <class T>
void MixedBehaviorProfile<T>::RealizationProbs(const MixedStrategyProfile<T> &mp,
					    int pl,
					    const Array<int> &actions,
					    GameTreeNodeRep *node)
{
  T prob;

  for (int i = 1; i <= node->children.Length(); i++)   {
    if (node->GetPlayer() && !node->GetPlayer()->IsChance())   {
      if (node->GetPlayer()->GetNumber() == pl)  {
	if (actions[node->GetInfoset()->GetNumber()] == i)
	  prob = (T) 1;
	else
	  prob = (T) 0;
      }
      else if (GetSupport().Contains(node->GetInfoset()->GetAction(i)))
	prob = (T) 1 / (T) GetSupport().NumActions(node->GetPlayer()->GetNumber(),
						   node->GetInfoset()->GetNumber());
      else {
	prob = (T) 0;
      }
    }
    else  {   // n.GetPlayer() == 0
      prob = static_cast<T>(node->infoset->GetActionProb(i));
    }

    GameTreeNodeRep *child = node->children[i];
    m_bvals[child->number] = prob * m_bvals[node->number];
    m_nvals[child->number] += m_bvals[child->number];

    RealizationProbs(mp, pl, actions, child);
  }    
	
}

template <class T>
MixedBehaviorProfile<T>::MixedBehaviorProfile(const MixedStrategyProfile<T> &p_profile)
  : DVector<T>(p_profile.GetGame()->NumActions()),
    m_support(p_profile.GetGame()),
    m_cacheValid(false),
    m_realizProbs(m_support.GetGame()->NumNodes()),
    m_beliefs(m_support.GetGame()->NumNodes()),
    m_nvals(m_support.GetGame()->NumNodes()),
    m_bvals(m_support.GetGame()->NumNodes()),
    m_nodeValues(m_support.GetGame()->NumNodes(), 
		 m_support.GetGame()->NumPlayers()),
    m_infosetValues(m_support.GetGame()->NumInfosets()),
    m_actionValues(m_support.GetGame()->NumActions()),
    m_regret(m_support.GetGame()->NumActions())
{
  m_realizProbs = (T) 0.0;
  m_beliefs = (T) 0.0;
  m_nodeValues = (T) 0.0;
  m_infosetValues = (T) 0.0;
  m_actionValues = (T) 0.0;
  m_regret = (T) 0.0;

  ((Vector<T> &) *this).operator=((T)0); 

  GameTreeNodeRep *root = dynamic_cast<GameTreeNodeRep *>(m_support.GetGame()->GetRoot().operator->());
  const StrategySupportProfile &support = p_profile.GetSupport();
  GameRep *game = m_support.GetGame();

  for (auto player : game->GetPlayers()) {
    m_nvals = (T) 0;
    m_bvals = (T) 0;

    for (Array<GameStrategy>::const_iterator strategy = support.Strategies(player).begin();
	 strategy != support.Strategies(player).end(); ++strategy) {
      if (p_profile[*strategy] > (T) 0) {
	const Array<int> &actions = strategy->m_behav;
	m_bvals[root->GetNumber()] = p_profile[*strategy];
	RealizationProbs(p_profile, player->GetNumber(), actions, root);
      }
    }
 
    m_nvals[1] = (T) 1;   // set the root nval
    BehaviorStrat(player->GetNumber(), root);
  }
}

template <class T>
MixedBehaviorProfile<T> &MixedBehaviorProfile<T>::operator=(const MixedBehaviorProfile<T> &p_profile)
{
  if (this != &p_profile && m_support == p_profile.m_support) {
    Invalidate();
    DVector<T>::operator=(p_profile);
    m_support = p_profile.m_support;
  }
  return *this;
}

//========================================================================
//               MixedBehaviorProfile<T>: Operator overloading
//========================================================================

template <class T>
bool MixedBehaviorProfile<T>::operator==(const MixedBehaviorProfile<T> &p_profile) const
{
  return (m_support == p_profile.m_support &&
	  (DVector<T> &) *this == (DVector<T> &) p_profile);
}

//========================================================================
//              MixedBehaviorProfile<T>: General data access
//========================================================================

template <class T> void MixedBehaviorProfile<T>::SetCentroid()
{
  for (int pl = 1; pl <= this->dvlen.Length(); pl++)
    for (int iset = 1; iset <= this->dvlen[pl]; iset++)
      if (m_support.NumActions(pl,iset) > 0) {
	T center = ((T) 1 / (T) m_support.NumActions(pl, iset));
	int act;
	for (act = 1; act <= this->svlen[this->dvidx[pl] + iset - 1]; act++)
	  this->dvptr[pl][iset][act] = center;
      }
}

template <class T>
void MixedBehaviorProfile<T>::UndefinedToCentroid()
{
  Game efg = m_support.GetGame();
  for (int pl = 1; pl <= efg->NumPlayers(); pl++) {
    GamePlayer player = efg->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      GameInfoset infoset = player->GetInfoset(iset);
      if (GetRealizProb(infoset) > (T) 0) {
	continue;
      }
      T total = (T) 0;
      for (int act = 1; act <= m_support.NumActions(pl, iset); act++) {
	total += GetActionProb(m_support.GetAction(pl, iset, act));
      }
      if (total == (T) 0) {
	for (int act = 1; act <= m_support.NumActions(pl, iset); act++) {
	  (*this)(pl, iset, act) = (T) 1.0 / (T) m_support.NumActions(pl, iset);
	}
      }
    }
  }
}

template <class T>
MixedBehaviorProfile<T> MixedBehaviorProfile<T>::Normalize() const
{
  auto norm = MixedBehaviorProfile<T>(*this);
  Game efg = m_support.GetGame();
  for (int pl = 1; pl <= efg->NumPlayers(); pl++) {
    GamePlayer player = efg->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      GameInfoset infoset = player->GetInfoset(iset);
      if (GetRealizProb(infoset) == (T) 0) {
	continue;
      }
      T total = (T) 0;
      for (int act = 1; act <= m_support.NumActions(pl, iset); act++) {
	total += GetActionProb(m_support.GetAction(pl, iset, act));
      }
      if (total == (T) 0) continue;
      for (int act = 1; act <= m_support.NumActions(pl, iset); act++) {
	norm(pl, iset, act) /= total;
      }
    }
  }
  return norm;
}

template<> void MixedBehaviorProfile<double>::Randomize()
{
  Game game = m_support.GetGame();
  *this = 0.0;

  // To generate a uniform distribution on the simplex correctly,
  // take i.i.d. samples from an exponential distribution, and
  // renormalize at the end (this is a special case of the Dirichlet distribution).
  for (int pl = 1; pl <= game->NumPlayers(); pl++) {
    GamePlayer player = game->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      GameInfoset infoset = player->GetInfoset(iset);
      for (int act = 1; act <= infoset->NumActions(); act++) {
	(*this)(pl, iset, act) = -std::log(((double) std::rand()) /
					   ((double) RAND_MAX));
      }
    }
  }
  MixedBehaviorProfile<double> norm(Normalize());
  for (int pl = 1; pl <= game->NumPlayers(); pl++) {
    GamePlayer player = game->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      GameInfoset infoset = player->GetInfoset(iset);
      for (int act = 1; act <= infoset->NumActions(); act++) {
        (*this)(pl, iset, act) = norm(pl, iset, act);
      }
    }
  }
}

template<> void MixedBehaviorProfile<Rational>::Randomize()
{
  // This operation is not well-defined when using Rational numbers;
  // use the version specifying the denominator grid instead.
  throw ValueException();
}

template <class T> void MixedBehaviorProfile<T>::Randomize(int p_denom)
{
  Game game = m_support.GetGame();
  *this = T(0);

  for (int pl = 1; pl <= game->NumPlayers(); pl++) {
    GamePlayer player = game->GetPlayer(pl);
    for (int iset = 1; iset <= player->NumInfosets(); iset++) {
      GameInfoset infoset = player->GetInfoset(iset);
      std::vector<int> cutoffs;
      for (int act = 1; act < infoset->NumActions(); act++) {
	// When we support C++11, we will be able to implement uniformity better
	cutoffs.push_back(std::rand() % (p_denom+1));
      }
      std::sort(cutoffs.begin(), cutoffs.end());
      cutoffs.push_back(p_denom);
      T sum = T(0);
      for (int act = 1; act < infoset->NumActions(); act++) {
	(*this)(pl, iset, act) = T(cutoffs[act] - cutoffs[act-1]) / T(p_denom);
	sum += (*this)(pl, iset, act);
      }
      (*this)(pl, iset, infoset->NumActions()) = T(1) - sum;
    }
  }
}





//========================================================================
//              MixedBehaviorProfile<T>: Interesting quantities
//========================================================================

//
// The p_definedOnly parameter allows us to compute the LiapValue for profiles
// which are incomplete.  Some methods -- such as the sequence form
// methods -- return all zeroes for all action probabilities at
// information sets sufficiently far off the equilibrium path.
// In such cases, *any* completion is Nash.
//
// This is really a hack because we don't have a proper way yet of
// indicating this.
// 
template <class T> 
T MixedBehaviorProfile<T>::GetLiapValue(bool p_definedOnly) const
{
  static const T BIG1 = (T) 10000;
  static const T BIG2 = (T) 100;

  T x, result = ((T) 0), avg, sum;
  
  // HACK: force it to recompute data.  FIX THIS.
  m_cacheValid = false;
  ComputeSolutionData();

  for (int i = 1; i <= m_support.GetGame()->NumPlayers(); i++) {
    for (int iset = 1; iset <= m_support.GetGame()->GetPlayer(i)->NumInfosets(); iset++) {
      avg = sum = (T)0;

      for (int act = 1; act <= m_support.NumActions(i, iset); act++) {
	GameActionRep *action = m_support.GetAction(i, iset, act);
	x = GetActionProb(action);
	avg += x * m_actionValues(action->GetInfoset()->GetPlayer()->GetNumber(),
				  action->GetInfoset()->GetNumber(),
				  action->GetNumber());
	sum += x;
	if (x > (T)0)  x = (T)0;
	result += BIG1 * x * x;         // add penalty for neg probabilities
      }

      for (int act = 1; act <= m_support.NumActions(i, iset); act++) {
	x = ActionValue(m_support.GetAction(i, iset, act)) - avg;
	if (x < (T)0) x = (T)0;
	result += x * x;          // add penalty if not best response
      }
      x = sum - (T)1;
      if (!p_definedOnly || sum >= (T) 1.0e-4) {
	result += BIG2 * x * x;       // add penalty for sum not equal to 1
      }
    }
  }
  return result;
}

template <class T>
const T &MixedBehaviorProfile<T>::GetRealizProb(const GameNode &node) const
{ 
  ComputeSolutionData();
  return m_realizProbs[node->GetNumber()];
}

template <class T>
T MixedBehaviorProfile<T>::GetRealizProb(const GameInfoset &iset) const
{ 
  ComputeSolutionData();
  T prob = (T) 0;
  for (int i = 1; i <= iset->NumMembers(); i++) {
    prob += m_realizProbs[iset->GetMember(i)->GetNumber()];
  }
  return prob;
}

template <class T>
const T &MixedBehaviorProfile<T>::GetBeliefProb(const GameNode &node) const
{ 
  ComputeSolutionData();
  return m_beliefs[node->GetNumber()];
}

template <class T>
Vector<T> MixedBehaviorProfile<T>::GetPayoff(const GameNode &node) const
{ 
  ComputeSolutionData();
  return m_nodeValues.Row(node->GetNumber());
}

template <class T>
const T &MixedBehaviorProfile<T>::GetPayoff(const GamePlayer &p_player, const GameNode &p_node) const
{
  ComputeSolutionData();
  return m_nodeValues(p_node->GetNumber(), p_player->GetNumber());
}


template <class T>
const T &MixedBehaviorProfile<T>::GetPayoff(const GameInfoset &iset) const
{ 
  ComputeSolutionData();
  return m_infosetValues(iset->GetPlayer()->GetNumber(), iset->GetNumber());
}

template <class T>
T MixedBehaviorProfile<T>::GetActionProb(const GameAction &action) const
{ 
  if (action->GetInfoset()->GetPlayer()->IsChance()) {
    GameTreeInfosetRep *infoset = dynamic_cast<GameTreeInfosetRep *>(action->GetInfoset().operator->());
    return static_cast<T>(infoset->GetActionProb(action->GetNumber()));
  }
  else if (!m_support.Contains(action)) {
    return (T) 0.0;
  }
  else {
    return (*this)(action->GetInfoset()->GetPlayer()->GetNumber(),
                  action->GetInfoset()->GetNumber(),
                  m_support.GetIndex(action));
  }
}

template <class T>
const T &MixedBehaviorProfile<T>::GetPayoff(const GameAction &act) const
{ 
  ComputeSolutionData();
  return m_actionValues(act->GetInfoset()->GetPlayer()->GetNumber(),
                       act->GetInfoset()->GetNumber(),
                       act->GetNumber());
}

template <class T>
const T &MixedBehaviorProfile<T>::GetRegret(const GameAction &act) const
{ 
  ComputeSolutionData();
  return m_regret(act->GetInfoset()->GetPlayer()->GetNumber(),
                  act->GetInfoset()->GetNumber(), act->GetNumber());
}

template <class T>
void MixedBehaviorProfile<T>::GetPayoff(GameTreeNodeRep *node, 
				     const T &prob, int player, T &value) const
{
  if (node->outcome) {
    value += prob * static_cast<T>(node->outcome->GetPayoff(player));
  }

  if (node->children.Length()) {
    int pl = node->infoset->m_player->m_number, iset = node->infoset->m_number;
    if (pl == 0) {
      // chance player
      for (int act = 1; act <= node->NumChildren(); act++) {
        GetPayoff(node->children[act],
                  prob * static_cast<T>(node->infoset->GetActionProb(act)), player, value);
      }
    } else {
      for (int act = 1; act <= m_support.NumActions(pl, iset); act++) {
        GameActionRep *action = m_support.GetAction(pl, iset, act);
        GetPayoff(node->children[action->GetNumber()],
                  prob * GetActionProb(action), player, value);
      }
    }
  }
}

template <class T> T MixedBehaviorProfile<T>::GetPayoff(int player) const
{
  T value = (T) 0;
  GetPayoff(dynamic_cast<GameTreeNodeRep *>(m_support.GetGame()->GetRoot().operator->()),
	    (T) 1, player, value);
  return value;
}

//
// The following routines compute the derivatives of quantities as
// the probability of the action 'p_oppAction' is changed.
// See Turocy (2001), "Computing the Quantal Response Equilibrium
// Correspondence" for details.
// These assume that the profile is interior (totally mixed),
// and that the game is of perfect recall
//

template <class T>
T MixedBehaviorProfile<T>::DiffActionValue(const GameAction &p_action,
				      const GameAction &p_oppAction) const
{
  ComputeSolutionData();
  T deriv = (T) 0;
  GameInfoset infoset = p_action->GetInfoset();
  GamePlayer player = p_action->GetInfoset()->GetPlayer();

  for (int i = 1; i <= infoset->NumMembers(); i++) {
    GameNode member = infoset->GetMember(i);
    GameNode child = member->GetChild(p_action->GetNumber());

    deriv += DiffRealizProb(member, p_oppAction) *
      (m_nodeValues(child->GetNumber(), player->GetNumber()) -
       m_actionValues(p_action->GetInfoset()->GetPlayer()->GetNumber(),
		      p_action->GetInfoset()->GetNumber(),
		      p_action->GetNumber()));

    deriv += m_realizProbs[member->GetNumber()] *
      DiffNodeValue(member->GetChild(p_action->GetNumber()), player, p_oppAction);
  }

  return deriv / GetRealizProb(p_action->GetInfoset());
}

template <class T>
T MixedBehaviorProfile<T>::DiffRealizProb(const GameNode &p_node,
				       const GameAction &p_oppAction) const
{
  ComputeSolutionData();
  T deriv = (T) 1;
  bool isPrec = false;
  GameNode node = p_node;
  while (node->GetParent()) {
    GameAction prevAction = node->GetPriorAction();
    if (prevAction != p_oppAction) {
      deriv *= GetActionProb(prevAction);
    }
    else {
      isPrec = true;
    }
    node = node->GetParent();
  }
 
  return (isPrec) ? deriv : (T) 0.0;
}

template <class T>
T MixedBehaviorProfile<T>::DiffNodeValue(const GameNode &p_node, 
				    const GamePlayer &p_player,
				    const GameAction &p_oppAction) const
{
  ComputeSolutionData();

  if (p_node->NumChildren() > 0) {
    GameInfoset infoset = p_node->GetInfoset();

    if (infoset == p_oppAction->GetInfoset()) {
      // We've encountered the action; since we assume perfect recall,
      // we won't encounter it again, and the downtree value must
      // be the same.
      return m_nodeValues(p_node->GetChild(p_oppAction->GetNumber())->GetNumber(),
			  p_player->GetNumber());
    }
    else {
      T deriv = (T) 0;
      for (int act = 1; act <= infoset->NumActions(); act++) {
	deriv += (DiffNodeValue(p_node->GetChild(act), p_player, p_oppAction) *
		  GetActionProb(infoset->GetAction(act)));
      }
      return deriv;
    }
  }
  else {
    // If we reach a terminal node and haven't encountered p_oppAction,
    // derivative wrt this path is zero.
    return (T) 0;
  }
}

//========================================================================
//             MixedBehaviorProfile<T>: Cached profile information
//========================================================================

template <class T>
void MixedBehaviorProfile<T>::ComputeSolutionDataPass2(const GameNode &node) const
{
  if (node->GetOutcome()) {
    GameOutcome outcome = node->GetOutcome();
    for (int pl = 1; pl <= m_support.GetGame()->NumPlayers(); pl++) { 
      m_nodeValues(node->GetNumber(), pl) += static_cast<T>(outcome->GetPayoff(pl));
    }
  }

  GameInfoset iset = node->GetInfoset();

  if (iset) {
    T infosetProb = (T) 0;
    for (int i = 1; i <= iset->NumMembers(); i++) {
      infosetProb += m_realizProbs[iset->GetMember(i)->GetNumber()];
    }

    if (infosetProb != infosetProb * (T) 0) {
      m_beliefs[node->GetNumber()] = m_realizProbs[node->GetNumber()] / infosetProb;
    }
    
    // push down payoffs from outcomes attached to non-terminal nodes 
    for (int child = 1; child <= node->NumChildren(); child++) { 
      m_nodeValues.SetRow(node->GetChild(child)->GetNumber(), 
			  m_nodeValues.Row(node->GetNumber()));
    }    

    for (int pl = 1; pl <= m_support.GetGame()->NumPlayers(); pl++) {
      m_nodeValues(node->GetNumber(), pl) = (T) 0;
    }

    for (int child = 1; child <= node->NumChildren(); child++)  {
      GameNode childNode = node->GetChild(child);
      ComputeSolutionDataPass2(childNode);

      GameAction act = childNode->GetPriorAction();

      for (int pl = 1; pl <= m_support.GetGame()->NumPlayers(); pl++) {
        m_nodeValues(node->GetNumber(), pl) +=
          GetActionProb(act) * m_nodeValues(childNode->GetNumber(), pl);
      }

      if (!iset->IsChanceInfoset()) {
	T &cpay = m_actionValues(act->GetInfoset()->GetPlayer()->GetNumber(),
				 act->GetInfoset()->GetNumber(),
				 act->GetNumber());
	if (infosetProb != infosetProb * (T) 0) {
	  cpay += m_beliefs[node->GetNumber()] * m_nodeValues(childNode->GetNumber(), iset->GetPlayer()->GetNumber());
	}
	else {
	  cpay = (T) 0;
	}
      }
    }
  }
}

// compute realization probabilities for nodes and isets.  
template <class T>
void MixedBehaviorProfile<T>::ComputeSolutionDataPass1(const GameNode &node) const
{
  if (node->GetParent()) {
    m_realizProbs[node->GetNumber()] = m_realizProbs[node->GetParent()->GetNumber()] * GetActionProb(node->GetPriorAction());
  }
  else {
    m_realizProbs[node->GetNumber()] = (T) 1;
  }
  
  if (node->GetInfoset()) {
    for (int i = 1; i <= node->NumChildren(); i++) {
      ComputeSolutionDataPass1(node->GetChild(i));
    }
  }
}

template <class T>
void MixedBehaviorProfile<T>::ComputeSolutionData() const
{
  if (m_cacheValid) {
    return;
  }
  m_actionValues = (T) 0;
  m_nodeValues = (T) 0;
  m_infosetValues = (T) 0;
  m_regret = (T) 0;
  ComputeSolutionDataPass1(m_support.GetGame()->GetRoot());
  ComputeSolutionDataPass2(m_support.GetGame()->GetRoot());

  // At this point, mark the cache as value, so calls to GetPayoff()
  // don't create a loop.
  m_cacheValid = true;

  for (int pl = 1; pl <= m_support.GetGame()->NumPlayers(); pl++) {
    for (int iset = 1; iset <= m_support.GetGame()->NumInfosets()[pl]; iset++) {
      GameInfoset infoset = m_support.GetGame()->GetPlayer(pl)->GetInfoset(iset);

      m_infosetValues(infoset->GetPlayer()->GetNumber(), infoset->GetNumber()) = (T) 0;
      for (int act = 1; act <= infoset->NumActions(); act++) {
        GameAction action = infoset->GetAction(act);
        m_infosetValues(infoset->GetPlayer()->GetNumber(),
                        infoset->GetNumber()) += GetActionProb(action) * ActionValue(action);
      }

      T brpayoff = ActionValue(infoset->GetAction(1));
      for (int act = 1; act <= infoset->NumActions(); act++) {
        brpayoff = std::max(brpayoff, ActionValue(infoset->GetAction(act)));
      }
      for (int act = 1; act <= infoset->NumActions(); act++) {
        GameAction action = infoset->GetAction(act);
        m_regret(action->GetInfoset()->GetPlayer()->GetNumber(),
                 action->GetInfoset()->GetNumber(),
                 act) = brpayoff - ActionValue(action);
      }
    }
  }
}

template <class T>
bool MixedBehaviorProfile<T>::IsDefinedAt(GameInfoset p_infoset) const
{
  for (int act = 1; act <= p_infoset->NumActions(); act++) {
    if (GetActionProb(p_infoset->GetAction(act)) > (T) 0) {
      return true;
    }
  }
  return false;
}

template <class T>
MixedStrategyProfile<T> MixedBehaviorProfile<T>::ToMixedProfile() const
{
  return MixedStrategyProfile<T>(*this);
}


}  // end namespace Gambit
