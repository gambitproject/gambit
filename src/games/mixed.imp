//
// This file is part of Gambit
// Copyright (c) 1994-2023, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/libgambit/mixed.imp
// Implementation of mixed strategy profile classes
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include <algorithm>

#include "game.h"
#include "gametable.h"
#include "gametree.h"
#include "mixed.h"

namespace Gambit {

//========================================================================
//                     MixedStrategyProfileRep<T>
//========================================================================

template <class T> 
MixedStrategyProfileRep<T>::MixedStrategyProfileRep(const StrategySupportProfile &p_support)
  : m_probs(p_support.MixedProfileLength()), m_support(p_support)
{
  SetCentroid();
}

template <class T> void MixedStrategyProfileRep<T>::SetCentroid() 
{
  for (auto player : m_support.GetGame()->GetPlayers()) {
    T center = ((T) 1) / ((T) m_support.NumStrategies(player->GetNumber()));
    for (Array<GameStrategy>::const_iterator strategy = m_support.Strategies(player).begin();
	 strategy != m_support.Strategies(player).end(); ++strategy) {
      (*this)[*strategy] = center;
    }
  }
}

template <class T>
MixedStrategyProfileRep<T> *MixedStrategyProfileRep<T>::Normalize() const
{
  auto norm = Copy();
  for (auto player : m_support.GetGame()->GetPlayers()) {
    T sum = (T) 0;
    for (auto strategy = m_support.Strategies(player).begin();
	 strategy != m_support.Strategies(player).end(); ++strategy) {
      sum += (*this)[*strategy];
    }
    if (sum == (T) 0) continue;
    for (auto strategy = m_support.Strategies(player).begin();
	 strategy != m_support.Strategies(player).end(); ++strategy) {
      (*norm)[*strategy] /= sum;
    }
  }
  return norm;
}

template<> void MixedStrategyProfileRep<double>::Randomize()
{
  Game nfg = m_support.GetGame();
  m_probs = 0.0;

  // To generate a uniform distribution on the simplex correctly,
  // take i.i.d. samples from an exponential distribution, and
  // renormalize at the end (this is a special case of the Dirichlet distribution).
  for (int pl = 1; pl <= nfg->NumPlayers(); pl++) {
    GamePlayer player = nfg->GetPlayer(pl);
    for (size_t st = 1; st <= player->Strategies().size(); st++) {
      (*this)[player->Strategies()[st]] = -std::log(((double) std::rand()) / 
						    ((double) RAND_MAX));
    }
  }
  auto normed = Normalize();
  (*this) = *normed;
  delete normed;
}

template<> void MixedStrategyProfileRep<Rational>::Randomize()
{
  // This operation is not well-defined when using Rational numbers;
  // use the version specifying the denominator grid instead.
  throw ValueException();
}

template <class T> void MixedStrategyProfileRep<T>::Randomize(int p_denom)
{
  Game nfg = m_support.GetGame();
  m_probs = T(0);

  for (int pl = 1; pl <= nfg->NumPlayers(); pl++) {
    GamePlayer player = nfg->GetPlayer(pl);
    std::vector<int> cutoffs;
    for (size_t st = 1; st < player->Strategies().size(); st++) {
      // When we support C++11, we will be able to implement uniformity better here.
      cutoffs.push_back(std::rand() % (p_denom+1));
    }
    std::sort(cutoffs.begin(), cutoffs.end());
    cutoffs.push_back(p_denom);
    T sum = T(0);
    for (size_t st = 1; st < player->Strategies().size(); st++) {
      (*this)[player->Strategies()[st]] = T(cutoffs[st] - cutoffs[st-1]) / T(p_denom);
      sum += (*this)[player->Strategies()[st]];
    }
    (*this)[player->Strategies().back()] = T(1) - sum;
  }
}

template <class T>
T MixedStrategyProfileRep<T>::GetRegret(const GameStrategy &p_strategy) const
{
  GamePlayer player = p_strategy->GetPlayer();
  T payoff = GetPayoffDeriv(player->GetNumber(), p_strategy);
  T brpayoff = payoff;
  for (int st = 1; st <= player->NumStrategies(); st++) {
    if (st != p_strategy->GetNumber()) {
      brpayoff = std::max(brpayoff,
                          GetPayoffDeriv(player->GetNumber(), player->GetStrategy(st)));
    }
  }
  return brpayoff - payoff;
}


//========================================================================
//                   TreeMixedStrategyProfileRep<T>
//========================================================================

template <class T>
TreeMixedStrategyProfileRep<T>::TreeMixedStrategyProfileRep(const MixedBehaviorProfile<T> &p_profile)
  : MixedStrategyProfileRep<T>(p_profile.GetGame())
{ }

template <class T>
MixedStrategyProfileRep<T> *TreeMixedStrategyProfileRep<T>::Copy() const
{
  return new TreeMixedStrategyProfileRep(*this); 
}

template <class T> T TreeMixedStrategyProfileRep<T>::GetPayoff(int pl) const
{
  MixedStrategyProfile<T> profile(Copy());
  return MixedBehaviorProfile<T>(profile).GetPayoff(pl);
}

template <class T> T
TreeMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, 
					       const GameStrategy &strategy) const
{
  MixedStrategyProfile<T> foo(Copy());
  int player1 = strategy->GetPlayer()->GetNumber();
  for (int st = 1; st <= this->m_support.NumStrategies(player1); st++) {
    foo[this->m_support.GetStrategy(player1, st)] = (T) 0;
  }
  foo[strategy] = (T) 1;
  return foo.GetPayoff(pl);
}

template <class T> T
TreeMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, 
					       const GameStrategy &strategy1,
					       const GameStrategy &strategy2) const
{
  GamePlayerRep *player1 = strategy1->GetPlayer();
  GamePlayerRep *player2 = strategy2->GetPlayer();
  if (player1 == player2) return (T) 0;

  MixedStrategyProfile<T> foo(Copy());
  for (Array<GameStrategy>::const_iterator strategy = this->m_support.Strategies(player1).begin();
       strategy != this->m_support.Strategies(player1).end(); ++strategy) {
    foo[*strategy] = (T) 0;
  }
  foo[strategy1] = (T) 1;

  for (Array<GameStrategy>::const_iterator strategy = this->m_support.Strategies(player2).begin();
       strategy != this->m_support.Strategies(player2).end(); ++strategy) {
    foo[*strategy] = (T) 0;
  }
  foo[strategy2] = (T) 1;

  return foo.GetPayoff(pl);
}



//========================================================================
//                   TableMixedStrategyProfileRep<T>
//========================================================================

template <class T>
MixedStrategyProfileRep<T> *TableMixedStrategyProfileRep<T>::Copy() const
{
  return new TableMixedStrategyProfileRep(*this); 
}

template <class T>
T TableMixedStrategyProfileRep<T>::GetPayoff(int pl, int index, int current) const
{
  if (current > this->m_support.GetGame()->NumPlayers())  {
    Game game = this->m_support.GetGame();
    auto &g = dynamic_cast<GameTableRep &>(*game);
    GameOutcomeRep *outcome = g.m_results[index];
    if (outcome) {
      return static_cast<T>(outcome->GetPayoff(pl));
    }
    else {
      return (T) 0;
    }
  }

  T sum = (T) 0;
  for (int j = 1; j <= this->m_support.NumStrategies(current); j++) {
    GameStrategyRep *s = this->m_support.GetStrategy(current, j);
    if ((*this)[s] != (T) 0) {
      sum += ((*this)[s] * 
	      GetPayoff(pl, index + s->m_offset, current + 1));
    }
  }
  return sum;
}

template <class T> T TableMixedStrategyProfileRep<T>::GetPayoff(int pl) const
{
  return GetPayoff(pl, 1, 1);
}

template <class T>
void 
TableMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, int const_pl,
						int cur_pl, long index, 
						const T &prob, T &value) const
{
  if (cur_pl == const_pl) {
    cur_pl++;
  }
  if (cur_pl > this->m_support.GetGame()->NumPlayers())  {
    Game game = this->m_support.GetGame();
    auto &g = dynamic_cast<GameTableRep &>(*game);
    GameOutcomeRep *outcome = g.m_results[index];
    if (outcome) {
      value += prob * static_cast<T>(outcome->GetPayoff(pl));
    }
  }
  else   {
    for (int j = 1; j <= this->m_support.NumStrategies(cur_pl); j++)  {
      GameStrategyRep *s = this->m_support.GetStrategy(cur_pl, j);
      if ((*this)[s] > (T) 0)  {
	GetPayoffDeriv(pl, const_pl, cur_pl + 1,
		       index + s->m_offset, prob * (*this)[s], value);
      }
    }
  }
}

template <class T> T
TableMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, 
						const GameStrategy &strategy) const
{
  T value = (T) 0;
  GetPayoffDeriv(pl, strategy->GetPlayer()->GetNumber(), 1,
		 strategy->m_offset + 1, (T) 1, value);
  return value;
}

template <class T>
void 
TableMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, int const_pl1,
						int const_pl2,
						int cur_pl, long index, 
						const T &prob, T &value) const
{
  while (cur_pl == const_pl1 || cur_pl == const_pl2) {
    cur_pl++;
  }
  if (cur_pl > this->m_support.GetGame()->NumPlayers())  {
    Game game = this->m_support.GetGame();
    auto &g = dynamic_cast<GameTableRep &>(*game);
    GameOutcomeRep *outcome = g.m_results[index];
    if (outcome) {
      value += prob * static_cast<T>(outcome->GetPayoff(pl));
    }
  }
  else   {
    for (int j = 1; j <= this->m_support.NumStrategies(cur_pl); j++ ) {
      GameStrategyRep *s = this->m_support.GetStrategy(cur_pl, j);
      if ((*this)[s] > (T) 0) {
	GetPayoffDeriv(pl, const_pl1, const_pl2,
		       cur_pl + 1, index + s->m_offset, 
		       prob * (*this)[s],
		       value);
      }
    }
  }
}

template <class T> T
TableMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, 
						const GameStrategy &strategy1,
						const GameStrategy &strategy2) const
{
  GamePlayerRep *player1 = strategy1->GetPlayer();
  GamePlayerRep *player2 = strategy2->GetPlayer();
  if (player1 == player2) return (T) 0;

  T value = (T) 0;
  GetPayoffDeriv(pl, player1->GetNumber(), player2->GetNumber(), 
		 1, strategy1->m_offset + strategy2->m_offset + 1,
		 (T) 1, value);
  return value;
}

//========================================================================
//                   AggMixedStrategyProfileRep<T>
//========================================================================

template <class T>
T AggMixedStrategyProfileRep<T>::GetPayoff(int pl) const
{
  auto &g = dynamic_cast<GameAggRep &>(*(this->m_support.GetGame()));
  agg::AGG *aggPtr = g.aggPtr;
  std::vector<double> s (aggPtr->getNumActions());
  for (int i=0;i<aggPtr->getNumPlayers();++i) {
    for (int j=0;j<aggPtr->getNumActions(i);++j){
      GameStrategy strategy = this->m_support.GetGame()->GetPlayer(i+1)->GetStrategy(j+1);
      int ind = this->m_support.m_profileIndex[strategy->GetId()];
      s[aggPtr->firstAction(i)+j]= (ind==-1)?(T)0:this->m_probs[ind];
    }
  }
  return (T) aggPtr->getMixedPayoff(pl-1, s);
}

template <class T>
T AggMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, const GameStrategy &ps) const
{
  auto &g = dynamic_cast<GameAggRep &>(*(this->m_support.GetGame()));
  agg::AGG *aggPtr = g.aggPtr;
  std::vector<double> s (aggPtr->getNumActions());
  for (int i=0;i<aggPtr->getNumPlayers();++i){
    if(i+1 == ps->GetPlayer()->GetNumber()){
      for (int j=0;j<aggPtr->getNumActions(i);++j){
        s[aggPtr->firstAction(i)+j] = (T) 0;
      }
      s.at(aggPtr->firstAction(i)+ ps->GetNumber()-1) = (T) 1;
    }  
    else {
      for (int j=0;j<aggPtr->getNumActions(i);++j){
        GameStrategy strategy = this->m_support.GetGame()->GetPlayer(i+1)->GetStrategy(j+1);
        const int &ind=this->m_support.m_profileIndex[strategy->GetId()];
        s[aggPtr->firstAction(i)+j]= (ind==-1)?(T)0:this->m_probs[ind];
      }
    }
  }
  return (T) aggPtr->getMixedPayoff(pl-1, s);
}

template <class T>
T AggMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, const GameStrategy &ps1,const GameStrategy &ps2) const
{
  GamePlayerRep *player1 = ps1->GetPlayer();
  GamePlayerRep *player2 = ps2->GetPlayer();
  if (player1 == player2) return (T) 0;

  auto &g = dynamic_cast<GameAggRep &>(*(this->m_support.GetGame()));
  agg::AGG *aggPtr = g.aggPtr;
  std::vector<double> s (aggPtr->getNumActions());
  for (int i=0;i<aggPtr->getNumPlayers();++i){
    if(i+1 == player1->GetNumber()){
      for (int j=0;j<aggPtr->getNumActions(i);++j){
        s[aggPtr->firstAction(i)+j] = (T) 0;
      }
      s.at(aggPtr->firstAction(i)+ ps1->GetNumber()-1) = (T) 1;
    }  
    else if(i+1 == player2->GetNumber()){
      for (int j=0;j<aggPtr->getNumActions(i);++j){
        s[aggPtr->firstAction(i)+j] = (T) 0;
      }
      s.at(aggPtr->firstAction(i)+ ps2->GetNumber()-1) = (T) 1;
    }  
    else {
      for (int j=0;j<aggPtr->getNumActions(i);++j){
        GameStrategy strategy = this->m_support.GetGame()->GetPlayer(i+1)->GetStrategy(j+1);
        const int &ind=this->m_support.m_profileIndex[strategy->GetId()];
        s[aggPtr->firstAction(i)+j]= (ind==-1)?(T)0:this->m_probs[ind];
      }
    }
  }
  return (T) aggPtr->getMixedPayoff(pl-1, s);
}

//========================================================================
//                   BagentMixedStrategyProfileRep<T>
//========================================================================

template <class T>
T BagentMixedStrategyProfileRep<T>::GetPayoff(int pl) const
{
  auto &g = dynamic_cast<GameBagentRep &>(*(this->m_support.GetGame()));
  agg::BAGG *baggPtr = g.baggPtr;
  std::vector<double> s (g.MixedProfileLength());
  Array<int> ns=g.NumStrategies();
  int bplayer=-1,btype=-1;
  for (int i=0,offs=0;i<baggPtr->getNumPlayers();++i)
   for (int tp=0;tp<baggPtr->getNumTypes(i);++tp) {
    if (pl == baggPtr->typeOffset[i]+tp+1){
      bplayer=i;
      btype=tp;
    }
    for (int j=0;j<ns[baggPtr->typeOffset[i]+tp+1];++j,++offs){
      GameStrategy strategy = this->m_support.GetGame()->GetPlayer(baggPtr->typeOffset[i]+tp+1)->GetStrategy(j+1);
      const int &ind=this->m_support.m_profileIndex[strategy->GetId()];
      s.at(offs)= (ind==-1)?(T)0:this->m_probs[ind];
    }
   }
  return (T) baggPtr->getMixedPayoff(bplayer,btype, s);
}

template <class T>
T BagentMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, const GameStrategy &ps) const
{
  auto &g = dynamic_cast<GameBagentRep &>(*(this->m_support.GetGame()));
  agg::BAGG *baggPtr = g.baggPtr;
  std::vector<double> s (g.MixedProfileLength());
  int bplayer=-1,btype=-1;
  for (int i=0;i<baggPtr->getNumPlayers();++i){
   for(int tp=0; tp<baggPtr->getNumTypes(i);++tp){
    if(pl == baggPtr->typeOffset[i]+tp+1){
      bplayer=i;
      btype=tp;
    }
    if(baggPtr->typeOffset[i]+tp+1 == ps->GetPlayer()->GetNumber()){
      for (unsigned int j=0;j<baggPtr->typeActionSets.at(i).at(tp).size();++j){
        s.at(baggPtr->firstAction(i,tp)+j) = 0;
      }
      s.at(baggPtr->firstAction(i,tp)+ ps->GetNumber()-1) = 1;
    }  
    else {
      for (int j=0;j<baggPtr->getNumActions(i,tp);++j){
        GameStrategy strategy = this->m_support.GetGame()->GetPlayer(baggPtr->typeOffset[i]+tp+1)->GetStrategy(j+1);
        const int &ind=this->m_support.m_profileIndex[strategy->GetId()];
        s.at(baggPtr->firstAction(i,tp)+j)= (ind==-1)?Rational(0):this->m_probs[ind];
      }
    }
   }
  }
  return (T) baggPtr->getMixedPayoff(bplayer,btype, s);
}

template <class T>
T BagentMixedStrategyProfileRep<T>::GetPayoffDeriv(int pl, const GameStrategy &ps1,const GameStrategy &ps2) const
{
  GamePlayerRep *player1 = ps1->GetPlayer();
  GamePlayerRep *player2 = ps2->GetPlayer();
  if (player1 == player2) return (T) 0;

  auto &g = dynamic_cast<GameBagentRep &>(*(this->m_support.GetGame()));
  agg::BAGG *baggPtr = g.baggPtr;
  std::vector<double> s (g.MixedProfileLength());
  int bplayer=-1,btype=-1;
  for (int i=0;i<baggPtr->getNumPlayers();++i){
   for(int tp=0;tp<baggPtr->getNumTypes(i);++tp){
    if(pl == baggPtr->typeOffset[i]+tp+1){
      bplayer=i;
      btype=tp;
    }
    
    if(baggPtr->typeOffset[i]+tp+1 == player1->GetNumber()){
      for (unsigned int j=0;j<baggPtr->typeActionSets.at(i).at(tp).size();++j){
        s.at(baggPtr->firstAction(i,tp)+j) = 0;
      }
      s.at(baggPtr->firstAction(i,tp)+ ps1->GetNumber()-1) = 1;
    }  
    else if(baggPtr->typeOffset[i]+tp+1 == player2->GetNumber()){
      for (int j=0;j<baggPtr->getNumActions(i,tp);++j){
        s.at(baggPtr->firstAction(i,tp)+j) = 0;
      }
      s.at(baggPtr->firstAction(i,tp)+ ps2->GetNumber()-1) = 1;
    }  
    else {
      for (unsigned int j=0;j<baggPtr->typeActionSets.at(i).at(tp).size();++j){
        GameStrategy strategy = this->m_support.GetGame()->GetPlayer(baggPtr->typeOffset[i]+tp+1)->GetStrategy(j+1);
        const int &ind=this->m_support.m_profileIndex[strategy->GetId()];
        s.at(baggPtr->firstAction(i,tp)+j)= static_cast<T>((ind==-1)?T(0):this->m_probs[ind]);
      }
    }
   } 
  }
  return (T) baggPtr->getMixedPayoff(bplayer,btype, s);
}


//========================================================================
//                 MixedStrategyProfile<T>: Lifecycle
//========================================================================

template <class T>
MixedStrategyProfile<T>::MixedStrategyProfile(const MixedBehaviorProfile<T> &p_profile)
  : m_rep(new TreeMixedStrategyProfileRep<T>(p_profile))
{
  Game game = p_profile.GetGame();
  auto *efg = dynamic_cast<GameTreeRep *>(game.operator->());
  for (int pl = 1; pl <= m_rep->m_support.GetGame()->NumPlayers(); pl++)  {
    for (int st = 1; st <= m_rep->m_support.GetGame()->GetPlayer(pl)->NumStrategies(); st++)  {
      T prob = (T) 1;

      for (int iset = 1; iset <= efg->GetPlayer(pl)->NumInfosets(); iset++) {
	if (efg->m_players[pl]->m_strategies[st]->m_behav[iset] > 0)
	  prob *= p_profile(pl, iset, efg->m_players[pl]->m_strategies[st]->m_behav[iset]);
      }
      (*this)[m_rep->m_support.GetGame()->GetPlayer(pl)->GetStrategy(st)] = prob;
    }
  }
}

template <class T>
MixedStrategyProfile<T>::MixedStrategyProfile(const MixedStrategyProfile<T> &p_profile)
  : m_rep(p_profile.m_rep->Copy())
{ }

template <class T>
MixedStrategyProfile<T> &MixedStrategyProfile<T>::operator=(const MixedStrategyProfile<T> &p_profile)
{
  if (this != &p_profile) {
    delete m_rep;
    m_rep = p_profile.m_rep->Copy();
  }
  return *this;
}

template <class T>
MixedStrategyProfile<T>::~MixedStrategyProfile()
{
  delete m_rep;
}


//========================================================================
//             MixedStrategyProfile<T>: General data access
//========================================================================

template <class T>
Vector<T> MixedStrategyProfile<T>::operator[](const GamePlayer &p_player) const
{
  Vector<T> probs(m_rep->m_support.Strategies(p_player).size());
  const Array<GameStrategy> &strategies = m_rep->m_support.Strategies(p_player);
  int st = 1;
  for (Array<GameStrategy>::const_iterator strategy = strategies.begin();
       strategy != strategies.end(); ++st, ++strategy) {
    probs[st] = (*this)[*strategy];
  }
  return probs;
}

template <class T> 
MixedStrategyProfile<T> MixedStrategyProfile<T>::ToFullSupport() const
{
  MixedStrategyProfile<T> full(m_rep->m_support.GetGame()->NewMixedStrategyProfile((T) 0));
  static_cast<Vector<T> &>(full) = (T) 0;

  for (int pl = 1; pl <= m_rep->m_support.GetGame()->NumPlayers(); pl++) {
    GamePlayer player = m_rep->m_support.GetGame()->GetPlayer(pl);
    for (int st = 1; st <= player->NumStrategies(); st++) {
      if (m_rep->m_support.Contains(player->GetStrategy(st))) {
	full[player->GetStrategy(st)] = (*this)[player->GetStrategy(st)];
      }
    }
  }

  return full;
}

//========================================================================
//    MixedStrategyProfile<T>: Computation of interesting quantities
//========================================================================

template <class T> T MixedStrategyProfile<T>::GetLiapValue() const
{
  static const T BIG1 = (T) 100;
  static const T BIG2 = (T) 100;

  T liapValue = (T) 0;
 
  for (auto player : m_rep->m_support.GetGame()->GetPlayers()) {
    // values of the player's strategies
    Array<T> values(m_rep->m_support.NumStrategies(player->GetNumber()));
    
    T avg = (T) 0, sum = (T) 0;
    for (Array<GameStrategy>::const_iterator strategy = m_rep->m_support.Strategies(player).begin();
	 strategy != m_rep->m_support.Strategies(player).end(); ++strategy) {
      const T &prob = (*this)[*strategy];
      values[m_rep->m_support.GetIndex(*strategy)] = GetPayoff(*strategy);
      avg += prob * values[m_rep->m_support.GetIndex(*strategy)];
      sum += prob;
      if (prob < (T) 0) {
	liapValue += BIG1*prob*prob;  // penalty for negative probabilities
      }
    }
		    
    for (int st = 1; st <= values.Length(); st++) {
      T regret = values[st] - avg;
      if (regret > (T) 0) {
	liapValue += regret*regret;  // penalty if not best response
      }
    }

    // penalty if sum does not equal to one
    liapValue += BIG2*(sum - (T) 1.0)*(sum - (T) 1.0); 
  }

  return liapValue;
}


} // end namespace Gambit
