//
// This file is part of Gambit
// Copyright (c) 1994-2013, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/libgambit/vector.imp
// Implementation of vector class
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "vector.h"

namespace Gambit {

//------------------------------------------------------------------------
//     Vector<T>: Constructors, destructor, constructive operators
//------------------------------------------------------------------------

template <class T> Vector<T>::Vector(unsigned int len) : Array<T>(len) 
{ }

template <class T> Vector<T>::Vector(int low, int high) 
  : Array<T>(low, high)
{ }

template <class T> Vector<T>::Vector(const Vector<T> &V) 
  : Array<T>(V) 
{ }

template <class T> Vector<T>::~Vector()   { }

template <class T> Vector<T>& Vector<T>::operator=(const Vector<T>& V)
{
  if (!Check(V))   throw DimensionException();
  Array<T>::operator=(V);
  return *this;
}


//------------------------------------------------------------------------
// inline arithmetic operators
//------------------------------------------------------------------------

template <class T> bool Vector<T>::operator!=(const Vector<T> &V) const
{ return !(*this == V); }

template <class T> bool Vector<T>::operator!=(T c) const
{ return !(*this == c); }


//------------------------------------------------------------------------
// inline internal functions
//------------------------------------------------------------------------

template <class T> bool Vector<T>::Check(const Vector<T> &v) const
{ return (v.mindex == this->mindex && v.maxdex == this->maxdex ); }


//------------------------------------------------------------------------
//	Vector: arithmetic operators
//------------------------------------------------------------------------

template<class T> Vector<T>& Vector<T>::operator=(T c)
{
  for(int i=this->mindex; i<=this->maxdex; i++)
    (*this)[i]= c;
  return (*this);
}

// arithmetic operators
template <class T> Vector<T>
Vector<T>::operator+(const Vector<T>& V) const
{
  if (!Check(V))   throw DimensionException();

  Vector<T> tmp(this->mindex,this->maxdex);
  for(int i=this->mindex; i<=this->maxdex; i++)
    tmp[i]= (*this)[i] + V[i];
  return tmp;
}

template <class T> Vector<T>
Vector<T>::operator-(const Vector<T>& V) const
{
  if (!Check(V))   throw DimensionException();

  Vector<T> tmp(this->mindex,this->maxdex);
  for(int i=this->mindex; i<=this->maxdex; i++)
    tmp[i]= (*this)[i] - V[i];
  return tmp;
}

template <class T> Vector<T>&
Vector<T>::operator+=(const Vector<T>& V)
{
  if (!Check(V))   throw DimensionException();

  for(int i=this->mindex; i<=this->maxdex; i++)
    (*this)[i] += V[i];
  return (*this);
}

template <class T> Vector<T>&
Vector<T>::operator-=(const Vector<T>& V)
{
  if (!Check(V))    throw DimensionException();

  for(int i=this->mindex; i<=this->maxdex; i++)
    (*this)[i] -= V[i];
  return (*this);
}

template <class T> Vector<T> Vector<T>::operator-(void)
{
  Vector<T> tmp(this->mindex,this->maxdex);
  for(int i=this->mindex; i<=this->maxdex; i++)
    tmp[i]= -(*this)[i];
  return tmp;
}

template <class T> Vector<T> Vector<T>::operator*(T c) const
{
  Vector<T> tmp(this->mindex,this->maxdex);
  for(int i=this->mindex; i<=this->maxdex; i++)
    tmp[i]= (*this)[i]*c;
  return tmp;
}

template <class T> Vector<T> &Vector<T>::operator*=(T c)
{
  for(int i=this->mindex; i<=this->maxdex; i++)
    (*this)[i] *= c;
  return (*this);
}

template <class T> T Vector<T>::operator*(const Vector<T>& V) const
{
  if (!Check(V))   throw DimensionException();

  T sum= (T)0;
  for(int i=this->mindex; i<=this->maxdex; i++)
    sum += (*this)[i] * V[i];
  return sum;
}


template <class T> Vector<T> Vector<T>::operator/(T c) const
{
  Vector<T> tmp(this->mindex,this->maxdex);
  for(int i=this->mindex; i<=this->maxdex; i++)
    tmp[i]= (*this)[i]/c;
  return tmp;
}


template <class T> bool Vector<T>::operator==(const Vector<T>& V) const
{
  if (!Check(V))   throw DimensionException();

  for(int i=this->mindex; i<=this->maxdex; i++)
    if( (*this)[i] != V[i] )
      return false;
  return true;
}

template <class T> bool Vector<T>::operator==(T c) const
{
  for(int i=this->mindex; i<=this->maxdex; i++)
    if( (*this)[i] != c )
      return false;
  return true;
}

template <class T> T Vector<T>::NormSquared(void) const
{
  T answer = (T)0;
  for (int i = 1; i <= this->Length(); i++)
    answer += (*this)[i] * (*this)[i];
  return answer;
}

} // end namespace Gambit
