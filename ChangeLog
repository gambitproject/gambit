# Changelog

## [16.4.0] - unreleased

### General
- Officially added support for Python 3.13.

### Removed
- The deprecated functions `Game.read_game`, `Game.parse_game` and `Game.write` functions have
  been removed as planned. (#357)

### Added
- Implement `GameRep::GetPlays` (C++) and `Node.plays`, `Infoset.plays`, and `Action.plays` (Python)
  to compute the set of terminal nodes consistent with a node, information set, or action (#517)
- Implement `GameRep::GetVeto` (C++) and `Action.veto` (Python) to compute the veto of an action (#522).


## [16.3.1] - unreleased

### Fixed
- Corrected a regression in which information sets were prematurely invalidated (and therefore
  `delete this` called on them) when removing the last node from an information set.


## [16.3.0] - 2025-01-13

### General
- Dropped support for Python 3.8.

### Added
- Implemented maximum-likelihood estimation for agent logit QRE, to parallel existing support
  for strategic logit QRE.  Strategic logit QRE function names have been modified to provide
  parallel naming.  Estimation using the correspondence now supports an option to stop at the
  first interior local maximizer found (if one exists).
- Maximum-likelihood estimation for logit QRE using empirical payoffs has an improved internal
  calculation of log-likelihood, and returns the estimated profile instead of just a list of
  probabilities.
- Reorganized naming conventions in pygambit for functions for computing QRE in both strategic
  and agent versions, and added a corresponding section in the user guide.
- `enumpoly_solve` has been returned to being fully supported from temporarily being experimental;
  now available in `pygambit`.
- `enumpoly_solve` for strategic games now uses the Porter, Nudelman, and Shoham (2004) ordering
  of supports to search.
- `to_arrays` converts a `Game` to a list of `numpy` arrays containing its reduced strategic form.
  (#461)
- Integrated support (in Python) for using `PHCpack` to solve systems of polynomial equations in
  `enumpoly_solve` based on an implementation formerly in the `contrib` section of the
  repository. (#165)
- New format-specific functions `pygambit.read_*` and `pygambit.Game.to_*` functions have been
  added to (de-)serialise games.  The existing `Game.read_game` and `Game.write` functions have
  been deprecated and will be removed in 16.4. (#357)

### Changed
- The built-in implementation of lrslib (dating from 2016) has been removed.  Instead, access to
  lrsnash is provided as an external tool via the `enummixed_solve` function, in parallel to
  PHCpack for `enumpoly_solve`.

### Fixed
- When parsing .nfg files, check that the number of outcomes or payoffs is the expected number,
  and raise an exception if not.  (#119)

### Removed
- `Game.write()` no longer supports generation of the XML-format files for Game Theory
  Explorer, as GTE no longer reads files in this format.


## [16.2.2] - unreleased

### Fixed
- `Game.copy_tree` and `Game.move_tree` implementations reversed the roles of the
  `src` and `dest` nodes (#499)

## [16.2.1] - 2025-01-06

### Fixed
- Corrected an internal implementation error in `Game.reveal()` in resolving references to
  information sets and players (#453)
- Reading .efg and .nfg game files which did not have whitespace at the end would lead to
  an infinite loop (#457)
- Attempting to call the default constructor on Game objects (rather than one of the factory
  functions) now raises a more informative exception (#463)

## [16.2.0] - 2024-04-05

### Fixed
- `gnm_solve`/`gambit-gnm` now correctly handles the degenerate case of a game where all
  payoffs are the same (#405), and checks that the perturbation vector specified has at least
  one non-zero component (#194)
- `ipa_solve`/`gambit-ipa` ensures the use of a generic perturbation vector; this resolves a
  problem where the method could return non-Nash output (#406)
- `gambit-enumpoly` could get stuck in an infinite loop, and/or fail to report some equilibria,
  due to floating-point rounding/tolerance issues; this has been fixed on known cases (#198)
- `gambit-logit` now uses perturbations to attempt to resolve correspondences that have
  bifurcations, and instead tries always to follow a curve that has the same orientation.
  This should eliminate cases in which tracing gets stuck in a loop or reverses itself
  when encountering bifurcations (#3)

### Added
- MixedStrategyProfile and MixedBehaviorProfile objects in pygambit can now be iterated in
  various dict-like ways
- `gnm_solve`/`gambit-gnm` now exposes several parameters which control the behavior of the
  path-following procedure
- The MixedBehaviorProfile object can now be initialized on creation by a given distribution.
- `append_move`/`append_infoset` now resolves either a singleton node reference or any
  iterable set of node references
- Additional regret-related functions added to `MixedBehaviorProfile` and `MixedStrategyProfile`
  in both C++ and Python
- Some caching added to payoff/strategy value calculations in `MixedStrategyProfile`
- `gambit-simpdiv` now supports expressing output as floating-point with a specified number of
  digits (#296)
- Parameters `first_step` and `max_accel` added to `gambit_logit` for finer control of
  numerical continuation process

### Changed
- Gambit now requires a compiler that supports C++17.
- Functions to compute Nash equilibria now return a NashComputationResult object instead of a bare
  list of profiles (#190)
- `liap_solve`/`gambit-liap` has been reimplemented to scale payoffs uniformly across games,
  to always take an explicit starting point (in `liap_solve`), and to specify a regret-based
  acceptance criterion (#330)
- `simpdiv_solve`/`gambit-simpdiv` now accepts a regret-based acceptance criterion (#439)
- `simpdiv_solve` now takes an explicit starting point (#445)
- Converted test suite for mixed behavior profiles to pytest style; added parametrizations for
  test_realiz_prob; added test_martingale_property_of_node_value (#375)
- Improved test suite for mixed strategy profiles (#374)
- Test suite for pygambit moved from src/pygambit/tests/ to tests/
- Improved __repr__ methods in pygambit for game-related classes
- Further extension of test suite for mixed behavior profiles to cover new indexing and profile
  order consistency for payoff-related calculations
- Overhaul of caching in `MixedBehaviorProfile` to use maps (`std::map`)
- Creation of random mixed profiles in pygambit is done with new `Game.random_strategy_profile` and
  `Game.random_behavior_profile` methods; these accept `numpy.random.Generator` objects for
  reproducible state.
  Creation of random mixed profiles in C++ is done with new `Game::NewRandomStrategyProfile` and
  `Game::NewRandomBehaviorProfile` methods; these accept STL `Generator` objects for reproducible state.
  The Python implementation is no longer just a wrapper around the C++ one.
- Graphical interface now uses simplicial subdivision as the recommended method for finding some
  equilibria in games with more than two players, instead of Lyapunov function minimisation

## [16.1.1] - 2024-01-10

### Fixed
- In gambit-logit, if there are chance actions with zero probability, information sets may be reached
  with zero probability.  In this event, gambit-logit treats beliefs at those information sets as being
  uniform across nodes (#63)
- Corrected outdated code in `fit_fixedpoint` and `fit_empirical`, and added extended documentation
  of both methods (#1)
- Fixed bug in gambit-lp which would return non-Nash output on extensive games if the game had chance nodes
  other than the root node (#134)
- In pygambit, fixed indexing in mixed behavior and mixed strategy profiles, which could result
  in strategies or actions belonging to other players or information sets being referenced when
  indexing by string label

### Changed
- In pygambit, resolving game objects with ambiguous or duplicated labels results in a ValueError,
  instead of silently returning the first matching object found.


## [16.1.0] - 2023-11-09

### Fixed
- Fixed regression in Game.from_dict() causing the method to fail (PR #399 by AbhijeetKrishnan)
- In `gambit-logit` on extensive games, a spurious final value was being emitted on each line of the
  CSV output; this has been removed.


## [16.1.0b1] - 2023-11-06

### Added
- Implement MixedBehaviorProfile.realiz_prob to return probability node is reached under the profile.

### Fixed
- When an action at a chance node is deleted the probabilities for the remaining actions are
  normalized.

### Changed
- The gambit-enumpoly solver has been marked as "experimental" and is no longer built by default, nor
  is it available via the graphical interface.


## [16.1.0a4] - 2023-10-13

### Changed
- Empty or all-whitespace strings cannot be used to access members of games in pygambit.
- Remaining compatibility code for wxWidgets 2.x removed from graphical interface.
- Migrated to pytest for testing of pygambit.
- ValueErrors raised for mixed behavior profiles when payoff, action_value, or infoset_value are
  called with the chance player.
- Implemented Game.delete_strategy to remove a strategy from a strategic game.
- Implemented regret for mixed strategy profiles.

### Fixed
- Regret on mixed behavior profiles now implements the standard definition of regret
  (loss in expected payoff relative to best response conditional on reaching the information set).


## [16.1.0a3] - 2023-09-29

### Changed
- The `refine` and `leash` parameters to simpdiv have been made available and documented in
  pygambit.
- Repackage logit solver in src/solvers; make pygambit.nash.logit_solve available as a
  method for finding a Nash equilibrium.
- Additional game transformation operations have been moved to the Game class, and old versions
  deprecated.
- Accessing payoffs of outcomes and pure strategy profiles is now standardized to use player
  references, and accessing by index has been removed.
- Game.num_nodes has been removed in favor of Game.nodes, which returns a list of the nodes
  in the game.


## [16.1.0a2] - 2023-09-22

### Changed
- Most operations which modify games have been moved to being operations on `Game` instead of
  being operations on classes representing elements of games.  For the most part old versions
  have been retained with a deprecation warning; these old versions will be removed in 16.2.0.
- `pygambit.supports` has been introduced to organise algorithms which operates on sets
  of pure strategies or actions, such as finding undominated strategies.
- `.payoff()` on mixed strategy and mixed behavior profiles now takes either a Player or string label.
  `.infoset_value()` and `.action_value()` have been introduced to replace calling `.payoff()` on
  these objects.
- The implementation of mixed strategy profiles and mixed behavior profiles has been thoroughly rewritten
  for improved consistency in behavior across members and between the two types of profile.
- The experimental concept of a `StrategicRestriction` has been removed from `pygambit`.
  Instead, calling `restrict` on a `StrategySupportProfile` creates a deep copy of its
  game with only the strategies specified.


## [16.1.0a1] - 2023-09-14

### Changed
- Cython 3.0 is now used for pygambit.
- Documentation of the pygambit API has been moved into docstrings.
- Chance action probabilities are now enforced to sum to exactly one at an information
  set.  This is accomplished by changing the API to set probabilities for all actions
  simultaneously; it is no longer possible to assign an action probability individually.

### Added
- Documented support in Python for estimating quantal response equilibria using
  either fixed-point or empirical payoff methods

### Fixed
- Corrected reference counting for C++ Game objects which could result in objects
  never being deallocated (see #331)
- Corrected Lyapunov function minimisation returning critical points that are
  not global minima (i.e. not equilibria) (#329)
- Corrected a regression in accessing contingencies of a game in Python.
- Removed use of explicit StopIteration (a holdover from Python 2.x support).



## [16.0.2] - 2022-01-28

### Fixed
- Updated build and packaging systems for current compilers across all platforms
- Refactored Python implementation to make pygambit PyPI-installable
